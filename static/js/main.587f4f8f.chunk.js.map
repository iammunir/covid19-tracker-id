{"version":3,"sources":["components/Cards/CardEl/CardEl.module.css","App.module.css","components/Cards/Cards.module.css","api/index.js","components/Header/Header.jsx","components/Cards/CardEl/CardEl.jsx","components/Cards/Cards.jsx","components/Tables/Tables.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","url","fetchData","a","axios","get","data","dataIndonesia","filter","country","attributes","fetchDataProvinsi","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Header","dataApi","classes","update","date","Date","Last_Update","toLocaleDateString","time","toLocaleTimeString","className","AppBar","position","Toolbar","Typography","variant","CardEl","remark","addClass","styles","infected","recovered","deaths","active","Grid","item","component","Card","xs","md","lg","cN","card","CardContent","color","gutterBottom","Cards","container","justify","Confirmed","Recovered","Deaths","Active","Tables","useState","dataProv","setDataProv","useEffect","fetchingData","TableContainer","Paper","Table","stickyHeader","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","key","Kode_Provi","scope","Provinsi","Kasus_Posi","Kasus_Semb","Kasus_Meni","App","setData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.587f4f8f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"CardEl_card__3q3Wn\",\"infected\":\"CardEl_infected__1tZ8e\",\"recovered\":\"CardEl_recovered__1LTOQ\",\"deaths\":\"CardEl_deaths__1GOKu\",\"active\":\"CardEl_active__3LdUC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\"};","import axios from 'axios';\n\nconst url = 'https://api.kawalcorona.com/';\n\nexport const fetchData = async () => {\n  const { data } = await axios.get(url);\n  const dataIndonesia = data.filter(country => country.attributes['Country_Region'] === 'Indonesia');\n  return dataIndonesia[0];\n}\n\nexport const fetchDataProvinsi = async () => {\n  const { data } = await axios.get(`${url}indonesia/provinsi/`);\n  return data;\n}\n\n\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport const Header = ({dataApi}) => {\n  const classes = useStyles();\n  \n  let update = 'Loading';\n  \n  if(dataApi) {\n    const date = new Date(dataApi.Last_Update).toLocaleDateString(['ban', 'id']);\n    const time = new Date(dataApi.Last_Update).toLocaleTimeString();\n    update = `${date} - ${time}`;\n  }\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            COVID-19 di Indonesia\n          </Typography>\n          <Typography variant=\"subtitle2\">\n            Update: {update}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport {Grid, Card, CardContent, Typography} from '@material-ui/core';\nimport cN from 'classnames';\n\nimport styles from './CardEl.module.css';\n\nconst CardEl = ({data, title, remark}) => {\n  \n  let addClass = null;\n\n  if (title === 'Positif') addClass = `${styles.infected}`\n  else if (title === 'Sembuh') addClass = `${styles.recovered}`\n  else if (title === 'Meninggal') addClass = `${styles.deaths}`\n  else if (title === 'Dirawat') addClass = `${styles.active}`\n\n  return (\n    <Grid item component={Card} xs={12} md={4} lg={2} className={cN(styles.card, addClass)}>\n      <CardContent>\n        <Typography color=\"textSecondary\" gutterBottom>\n          {title}\n        </Typography>\n        <h1>\n          {data}\n        </h1>\n        <Typography variant=\"body2\">\n          {remark}\n        </Typography>\n      </CardContent>\n    </Grid>\n  )\n}\n\nexport default CardEl;\n","import React from 'react';\nimport {Grid} from '@material-ui/core';\n\nimport styles from './Cards.module.css';\nimport CardEl from './CardEl/CardEl';\n\nconst Cards = ({dataApi}) => {\n\n  if(!dataApi) {\n    return 'Load Data...';\n  }\n\n  return (\n    <div className={styles.container}>\n      <Grid container spacing={3} justify=\"center\">\n        <CardEl \n          data={dataApi.Confirmed} \n          title=\"Positif\" \n          remark=\"Jumlah pasien terinfeksi\"\n           />\n        <CardEl \n          data={dataApi.Recovered} \n          title=\"Sembuh\" \n          remark=\"Jumlah pasien sembuh\"\n          />\n        <CardEl \n          data={dataApi.Deaths} \n          title=\"Meninggal\" \n          remark=\"Jumlah pasien meninggal\"\n          />\n        <CardEl \n          data={dataApi.Active} \n          title=\"Dirawat\" \n          remark=\"Jumlah pasien sedang dirawat\"\n          />\n      </Grid>\n    </div>\n  )\n}\n\nexport default Cards;\n","import React, { useState, useEffect } from 'react';\nimport {Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper} from '@material-ui/core';\n\nimport { fetchDataProvinsi } from '../../api/index';\n\nconst Tables = () => {\n\n  const [dataProv, setDataProv] = useState([]);\n\n  useEffect(() => {\n    const fetchingData = async () => {\n      setDataProv(await fetchDataProvinsi());\n    }\n    fetchingData();\n  }, [])\n\n  return (\n    <TableContainer component={Paper}>\n      <Table stickyHeader aria-label=\"sticky table\">\n        \n        <TableHead>\n          <TableRow>\n            <TableCell>Provinsi</TableCell>\n            <TableCell align=\"right\">Positif</TableCell>\n            <TableCell align=\"right\">Sembuh</TableCell>\n            <TableCell align=\"right\">Meninggal</TableCell>\n          </TableRow>\n        </TableHead>\n\n        <TableBody>\n          {dataProv.map((data) => (\n            <TableRow key={data.attributes.Kode_Provi}>\n              <TableCell component=\"th\" scope=\"row\">\n                {data.attributes.Provinsi}\n              </TableCell>\n              <TableCell align=\"right\">{data.attributes.Kasus_Posi}</TableCell>\n              <TableCell align=\"right\">{data.attributes.Kasus_Semb}</TableCell>\n              <TableCell align=\"right\">{data.attributes.Kasus_Meni}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n\n      </Table>\n    </TableContainer>\n  )\n}\n\nexport default Tables;\n","import React, { useState, useEffect } from 'react';\n\nimport styles from './App.module.css';\n\nimport { fetchData } from './api/index'; \nimport Header from './components/Header/Header';\nimport Card from './components/Cards/Cards';\nimport Tables from './components/Tables/Tables';\n\nfunction App() {\n\n  const [ data, setData ] = useState({})\n\n  useEffect(() => {\n    const fetchingData = async () => {\n      setData(await fetchData());\n    }\n    fetchingData();\n  }, [])\n\n  return (\n    <div className={styles.container}>\n      <Header dataApi={data.attributes}/>\n      <Card dataApi={data.attributes} />\n      <Tables />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}